import requests
import json
import re


def get_api_endpoints(filepath="APIs.md"):
    """Parses the APIs.md file to extract endpoint information."""
    endpoints = []
    try:
        with open(filepath, 'r') as f:
            content = f.read()
    except FileNotFoundError:
        print(f"Error: {filepath} not found.")
        return endpoints

    # Split by ## and remove first empty part
    sections = content.split('## ')[1:]
    for section in sections:
        lines = section.strip().split('\n')
        name = lines[0].strip()

        url_template = None
        description = None
        endpoint_path = None

        for line in lines[1:]:
            if line.startswith('- Endpoint:'):
                endpoint_path = line.split(':', 1)[1].strip()
            elif line.startswith('- URL:'):
                url_template = line.split(':', 1)[1].strip()
            elif line.startswith('- Description:'):
                description = line.split(':', 1)[1].strip()

        if name and url_template and endpoint_path and description:
            endpoints.append({
                "name": name,
                "path": endpoint_path,
                "url_template": url_template,
                "description": description
            })
    return endpoints


def fetch_data(url):
    """Fetches JSON data from a given URL."""
    try:
        print(f"Fetching {url}...")
        response = requests.get(url, timeout=15)  # Increased timeout
        response.raise_for_status()  # Raises an HTTPError for bad responses (4XX or 5XX)
        return response.json()
    except requests.exceptions.HTTPError as e:
        print(f"HTTP error fetching {url}: {e}")
        if e.response.status_code == 404:
            print(
                "This might be due to an invalid ID (e.g., event_id for a non-existent gameweek).")
    except requests.exceptions.RequestException as e:
        print(f"Error fetching {url}: {e}")
    except json.JSONDecodeError as e:
        # Log part of response
        print(
            f"Error decoding JSON from {url}: {e}. Response text: {response.text[:200]}...")
    return None


def simplify_data(data, max_list_items=1):
    """Simplifies data structures for representative sampling."""
    if isinstance(data, list):
        if not data:
            return []
        sample = data[:max_list_items]
        simplified_sample = [simplify_data(
            item, max_list_items) for item in sample]

        if len(data) > max_list_items:
            simplified_sample.append(
                f"... {len(data) - max_list_items} more item(s) ...")
        return simplified_sample
    elif isinstance(data, dict):
        simplified_dict = {}
        for key, value in data.items():
            simplified_dict[key] = simplify_data(value, max_list_items)
        return simplified_dict
    else:
        return data


def main():
    """Main function to generate SAMPLE_DATA.md."""
    output_md_content = "# FPL API Sample Data\n\nThis document contains sample data structures for various Fantasy Premier League API endpoints. The samples are generated by fetching live data and simplifying it to show the general structure.\n\n"

    apis = get_api_endpoints()
    if not apis:
        print("No APIs found or APIs.md could not be read. Exiting.")
        return

    default_event_id = None
    default_element_id = None
    # These IDs are typically specific and not easily defaulted without user input or further discovery
    default_league_id = None
    default_entry_id = None
    default_page = "1"

    # Fetch bootstrap-static data to extract default IDs
    bootstrap_endpoint = next(
        (api for api in apis if api["path"] == "/bootstrap-static/"), None)
    if bootstrap_endpoint:
        print("Fetching bootstrap-static data to extract default IDs...")
        bootstrap_data = fetch_data(bootstrap_endpoint["url_template"])
        if bootstrap_data:
            if bootstrap_data.get("events") and len(bootstrap_data["events"]) > 0:
                first_event = next((event for event in bootstrap_data["events"] if event and event.get(
                    "id") is not None), None)
                if first_event:
                    default_event_id = str(first_event["id"])
                    print(f"Using default_event_id: {default_event_id}")

            if bootstrap_data.get("elements") and len(bootstrap_data["elements"]) > 0:
                first_element = next(
                    (el for el in bootstrap_data["elements"] if el and el.get("id") is not None), None)
                if first_element:
                    default_element_id = str(first_element["id"])
                    print(f"Using default_element_id: {default_element_id}")
        else:
            print("Failed to fetch bootstrap-static data. Using fallback default IDs.")
    else:
        print(
            "Bootstrap-static endpoint not found in APIs.md. Using hardcoded fallback IDs.")

    if not default_event_id:
        default_event_id = "1"  # Fallback
        print(f"Using fallback default_event_id: {default_event_id}")
    if not default_element_id:
        default_element_id = "1"  # Fallback
        print(f"Using fallback default_element_id: {default_element_id}")

    for api in apis:
        output_md_content += f"## Endpoint: {api['name']} ({api['path']})\n\n"
        output_md_content += f"**URL Template:** `{api['url_template']}`\n\n"
        output_md_content += f"**Description:** {api['description']}\n\n"

        current_url = api["url_template"]

        placeholders = re.findall(r"\{(\w+)\}", current_url)
        skip_fetch = False
        unresolved_placeholders = []

        temp_url = current_url  # Use a temporary variable for replacements
        for placeholder in placeholders:
            if placeholder == "event_id":
                if default_event_id:
                    temp_url = temp_url.replace("{event_id}", default_event_id)
                else:
                    unresolved_placeholders.append(placeholder)
            elif placeholder == "element_id":
                if default_element_id:
                    temp_url = temp_url.replace(
                        "{element_id}", default_element_id)
                else:
                    unresolved_placeholders.append(placeholder)
            elif placeholder == "league_id":
                if default_league_id:
                    temp_url = temp_url.replace(
                        "{league_id}", default_league_id)
                else:
                    unresolved_placeholders.append(placeholder)
            elif placeholder == "entry_id":
                if default_entry_id:
                    temp_url = temp_url.replace("{entry_id}", default_entry_id)
                else:
                    unresolved_placeholders.append(placeholder)
            elif placeholder == "page":
                temp_url = temp_url.replace("{page}", default_page)
            # else: # Unknown placeholder, re.findall is specific enough
            #     unresolved_placeholders.append(placeholder)
        current_url = temp_url

        if api["path"] == "/me/":  # Requires authentication
            output_md_content += "**Note:** This endpoint requires authentication and was not fetched.\n"
            skip_fetch = True
        elif unresolved_placeholders:
            output_md_content += f"**Note:** This endpoint could not be fetched because it requires placeholder(s) for which no default value is available: `{', '.join(unresolved_placeholders)}`.\n"
            output_md_content += "You may need to provide specific IDs (e.g., for a league or entry) to test these endpoints.\n"
            skip_fetch = True

        if not skip_fetch:
            output_md_content += f"**Effective URL Fetched:** `{current_url}`\n\n"
            data = fetch_data(current_url)
            if data:
                simplified = simplify_data(data)
                output_md_content += "### Sample Response Structure:\n"
                output_md_content += "```json\n"
                # Use ensure_ascii=False for better readability of special characters if any
                output_md_content += json.dumps(simplified,
                                                indent=2, ensure_ascii=False)
                output_md_content += "\n```\n"
            else:
                output_md_content += "**Note:** Failed to fetch or process data for this endpoint. The endpoint might be unavailable, require specific conditions (e.g., a live gameweek), or the provided default IDs might not yield data.\n"

        output_md_content += "\n---\n\n"

    try:
        with open("SAMPLE_DATA.md", "w", encoding='utf-8') as f:
            f.write(output_md_content)
        print("SAMPLE_DATA.md has been generated successfully.")
    except IOError as e:
        print(f"Error writing SAMPLE_DATA.md: {e}")


if __name__ == "__main__":
    main()
